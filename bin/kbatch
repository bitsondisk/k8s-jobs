#!/usr/bin/env python3

import argparse
import subprocess

from k8s_jobs import __version__
from k8s_jobs.klib import combine_script_and_args, generate_templated_yaml


def run_k8s_batch_job(args):
    combine_script_and_args(args)
    temp_yaml = generate_templated_yaml(args)

    subprocess.check_call(["kubectl create -f {temp_yaml_name} | sed 's/.*\"\\(.*\\)\".*/\\1/g'".format(
        temp_yaml_name=temp_yaml.name,
    )], shell=True)


def main():
    """
    The kbatch script is designed to run a given batch job in kubernetes.
    It includes the ability to specify either a pre-defined config yaml file, or a given docker container to run.
    It then runs the given command and arguments specified, defaulting to whatever is in the config yaml (if given).
    In addition, cpu/memory/disk reservations and/or limits can be specified for the job as well.
    """
    parser = argparse.ArgumentParser()

    parser.add_argument('--version', action='version', help='Show the current version of kbatch',
                        version='%(prog)s {version}'.format(version=__version__))

    parser.add_argument('--file', '-f', help='Config yaml file to use (optional)')
    parser.add_argument('--image', '-i', help='Docker container image to run (required unless a yaml is provided)')
    parser.add_argument('--container-name', help='Container name to use (optional)')

    parser.add_argument('--name', '-n', help='Name of the job (an autogenerated id will be added to this name)')

    parser.add_argument('--cpu', help='CPU reservation (In CPUs: 100m (== 0.1), 4)')
    parser.add_argument('--memory', help='Memory reservation (In bytes: 1024, 1e6, 100M, 128Mi)')
    parser.add_argument('--disk', help='Disk reservation (In bytes: 1024, 1e6, 100M, 128Mi)')
    parser.add_argument('--cpu-limit', help='CPU limit (In CPUs: 100m (== 0.1), 4)')
    parser.add_argument('--memory-limit', help='Memory limit (In bytes: 1024, 1e6, 100M, 128Mi)')
    parser.add_argument('--disk-limit', help='Disk limit (In bytes: 1024, 1e6, 100M, 128Mi)')
    parser.add_argument('--time', help='Time limit (seconds)')

    parser.add_argument('--persistent-disk-name', help='Persistent disk name (required to use a gcePersistentDisk)')
    parser.add_argument('--volume-name', help='Persistent disk volume name (optional)')
    parser.add_argument('--mount-path', help='Mount path for the persistent disk (optional, default is /static)')
    parser.add_argument('--volume-read-write', help='Mount the volume as read-write (default is read-only)',
                        action='store_true')

    parser.add_argument('--preemptible', '-p', help='Allow scheduling on preemptible nodes', action='store_true')

    parser.add_argument('--script', help='Execute a bash script from a file from within the job '
                        'before the command args if they are present')

    parser.add_argument('cmd_args', metavar='cmd [args...]', nargs='*',
                        help='Command with arguments to run in the given container (optional)')

    args = parser.parse_args()

    run_k8s_batch_job(args)


if __name__ == '__main__':
    main()
